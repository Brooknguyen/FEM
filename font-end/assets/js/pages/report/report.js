//report.js
import { renderFilterReport } from "./filterAHU.js";
import { renderDailyWorkReport } from "./dailywork.js";
import { renderInnovateReport } from "./innovateReport.js";
import {
  renderMaintenanceReport,
  submitMaintenanceReport,
} from "./maintenanceReport.js";

export async function renderMaintenance() {
  return `
    <section class="card p-4" id="report-section">
      <h2 id="report-title" class="text-xl font-bold mb-4" style="text-align:center; font-weight:700">B√ÅO C√ÅO</h2>

      <div class="toolbar" style="display:flex;gap:12px;align-items:center;margin-bottom:12px">
        <label style="font-weight:600">Lo·∫°i b√°o c√°o:
          <select id="report-type" style="padding:8px 10px;border:1px solid #ddd;border-radius:8px">
            <option value="filterAHU">B√°o c√°o thay th·∫ø OA filter</option>
            <option value="dailywork">B√°o c√°o c√¥ng vi·ªác h√†ng ng√†y</option>
            <option value="innovateReport">B√°o c√°o c·∫£i ti·∫øn</option>
            <option value="maintenanceReport">L·ªãch s·ª≠ s·ª≠a ch·ªØa b·∫£o d∆∞·ª°ng</option>
          </select>
        </label>
        
        <label style="font-weight:600">Ng√†y:
          <input type="date" id="filter-date" style="padding:8px 10px; border:1px solid #ddd; border-radius:8px" />
        </label>
        <button id="add-task-btn" class="btn primary" style="padding:8px 12px; background-color: #1976d2; color:white; border:none; border-radius: 4px; cursor:pointer; display:none">
          ‚ûï Th√™m n·ªôi dung
        </button>

        <div id="switch-btn" style="display: flex; gap: 10px; margin-left: 900px">
          <button id="edit-report" class="btn primary" style="
            padding: 8px 20px; 
            border-radius: 8px; 
            background: #e17eeeff; 
            color: black; 
            border: none; 
            display: inline-flex; 
            align-items: center; 
            gap: 8px; 
            white-space: nowrap;
            height: 36px; /* ho·∫∑c chi·ªÅu cao ph√π h·ª£p */
          ">
            <img src="assets/pictures/edit.png" alt="M√¥ t·∫£ ·∫£nh" width="20" height="20" />
            B√°o c√°o
          </button>
          <button id="update-report" class="btn primary" style="
            padding: 8px 20px; 
            border-radius:8px; 
            background: #7eee8bff; 
            color: black; 
            border:none; 
            display: none;
            align-items: center;
            gap: 8px;
            white-space: nowrap;
            height:36px;
          ">
            <img src="assets/pictures/update.png" alt="M√¥ t·∫£ ·∫£nh" width="20" height="20" />
            C·∫≠p nh·∫≠t
          </button>
          <button id="exit" class="btn primary" style="
            padding: 8px 20px; 
            border-radius:8px; 
            background: #f25a34ff; 
            color: black; 
            border:none; 
            display: none;
            align-items:center;
            gap:8px;
            white-space:nowrap;
            height:36px
            ">
            <img src="assets/pictures/remove.png" alt="M√¥ t·∫£ ·∫£nh" width="20" height="15" />
            Tho√°t
          </button>
        </div>

      </div>

      <div id="report-container"></div>
    </section>
  `;
}

export function setupReportEvents() {
  const select = document.getElementById("report-type");
  const dateInput = document.getElementById("filter-date");
  const container = document.getElementById("report-container");
  const title = document.getElementById("report-title");
  const updateBtn = document.getElementById("update-report");
  const editBtn = document.getElementById("edit-report");
  const exitBtn = document.getElementById("exit");

  if (!select || !container || !dateInput || !title || !updateBtn) return;

  // ƒê·∫∑t ng√†y m·∫∑c ƒë·ªãnh l√† h√¥m nay (ƒë·ªãnh d·∫°ng yyyy-MM-dd ƒë·ªÉ input date hi·ªÉu)
  const today = new Date();
  const yyyy = today.getFullYear();
  const mm = String(today.getMonth() + 1).padStart(2, "0");
  const dd = String(today.getDate()).padStart(2, "0");

  if (select.value !== "maintenanceReport") {
    dateInput.value = `${yyyy}-${mm}-${dd}`;
  } else {
    dateInput.value = ""; // maintenanceReport: kh√¥ng t·ª± set h√¥m nay
  }

  const map = {
    filterAHU: renderFilterReport,
    dailywork: renderDailyWorkReport,
    innovateReport: renderInnovateReport,
    maintenanceReport: renderMaintenanceReport,
  };

  const titles = {
    filterAHU: "B√ÅO C√ÅO THAY TH·∫æ OA FILTER",
    dailywork: "B√ÅO C√ÅO C√îNG VI·ªÜC H√ÄNG NG√ÄY",
    innovateReport: "B√ÅO C√ÅO C·∫¢I TI·∫æN",
    maintenanceReport: "L·ªäCH S·ª¨ S·ª¨A CH·ªÆA B·∫¢O D∆Ø·ª†NG",
  };

  // H√†m format ng√†y yyyy-MM-dd => yyyy/MM/dd
  function formatDateToSlash(dateStr) {
    if (!dateStr) return "";
    return dateStr.replace(/-/g, "/");
  }

  async function renderSelectedReport() {
    const type = select.value; // filterAHU | dailywork | innovateReport | maintenanceReport

    const date = dateInput.value; // yyyy-MM-dd
    const titleText = titles[type] || "";
    const formattedDate = formatDateToSlash(date); // yyyy/MM/dd

    // 1) C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ
    if (titleText !== "L·ªäCH S·ª¨ S·ª¨A CH·ªÆA B·∫¢O D∆Ø·ª†NG") {
      title.textContent =
        titleText + (formattedDate ? ` - ${formattedDate}` : "");
    } else {
      title.textContent = titleText;
    }

    // 2) Reset v·ªÅ ch·∫ø ƒë·ªô xem (view mode) cho thanh c√¥ng c·ª•
    const addBtnEl = document.getElementById("add-task-btn");
    const editBtnEl = document.getElementById("edit-report");
    const updateBtnEl = document.getElementById("update-report");
    const exitBtnEl = document.getElementById("exit");
    const switchWrap = document.getElementById("switch-btn");

    if (addBtnEl) addBtnEl.style.display = "none";
    if (editBtnEl) editBtnEl.style.display = "inline-flex";
    if (updateBtnEl) updateBtnEl.style.display = "none";
    if (exitBtnEl) exitBtnEl.style.display = "none";
    if (switchWrap) switchWrap.style.marginLeft = "900px";

    // 3) Hi·ªÉn th·ªã tr·∫°ng th√°i loading
    container.innerHTML = `
    <div style="padding:16px; text-align:center; opacity:0.8;">
      ƒêang t·∫£i b√°o c√°o...
    </div>
  `;

    // 4) Render b√°o c√°o theo type
    const fn = map[type];
    try {
      if (typeof fn === "function") {
        const html = await fn(date); // truy·ªÅn yyyy-MM-dd
        container.innerHTML = html;

        // 4.1) N·∫øu l√† maintenanceReport: lu√¥n ƒë·∫£m b·∫£o v√†o view mode (kh√¥ng c√≥ c·ªôt thao t√°c)
        //      => g·ª° ho√†n to√†n c·ªôt "Thao t√°c" n·∫øu c√≥
        if (
          type === "maintenanceReport" &&
          typeof window.__setMaintenanceEditMode === "function"
        ) {
          window.__setMaintenanceEditMode(false);
        }
      } else {
        container.innerHTML = "<p style='padding:12px'>Kh√¥ng c√≥ d·ªØ li·ªáu</p>";
      }
    } catch (err) {
      console.error("[renderSelectedReport] error:", err);
      container.innerHTML = `
      <div style="padding:12px; color:#b00020;">
        L·ªói khi t·∫£i b√°o c√°o. Vui l√≤ng th·ª≠ l·∫°i.
      </div>
    `;
    }
  }

  select.addEventListener("change", () => {
    const type = select.value;

    if (type === "maintenanceReport") {
      // maintenance: kh√¥ng auto ƒëi·ªÅn ‚Äî ƒë·ªÉ tr·ªëng ƒë·ªÉ user t·ª± ch·ªçn
      dateInput.value = "";
    } else {
      // c√°c lo·∫°i kh√°c: auto h√¥m nay
      const today = new Date();
      const yyyy = today.getFullYear();
      const mm = String(today.getMonth() + 1).padStart(2, "0");
      const dd = String(today.getDate()).padStart(2, "0");
      dateInput.value = `${yyyy}-${mm}-${dd}`;
    }
    renderSelectedReport();
  });
  dateInput.addEventListener("change", renderSelectedReport);

  editBtn.addEventListener("click", async () => {
    document.getElementById("edit-report").style.display = "none";
    document.getElementById("update-report").style.display = "inline-flex";
    document.getElementById("exit").style.display = "inline-flex";

    // N·∫øu b√°o c√°o ƒëang ch·ªçn l√† maintenanceReport th√¨ hi·ªán n√∫t th√™m n·ªôi dung
    if (select.value === "maintenanceReport") {
      document.getElementById("add-task-btn").style.display = "flex";
      document.getElementById("switch-btn").style.marginLeft = "744px";
      window.__setMaintenanceEditMode?.(true);
    } else {
      document.getElementById("add-task-btn").style.display = "none";
      document.getElementById("switch-btn").style.marginLeft = "900px";
    }
    window.currentReportEnableEdit();
  });

  updateBtn.addEventListener("click", async () => {
    const startedAt = Date.now();
    const type = select.value; // filterAHU | dailywork | ...
    const date = dateInput.value; // yyyy-MM-dd (vd 2025-10-01)

    // helper log
    const logPrefix = `[UPDATE] type=${type} date=${date}`;
    console.info(`${logPrefix} - begin`);

    try {
      updateBtn.disabled = true;
      updateBtn.textContent = "ƒêang l∆∞u...";

      if (type === "filterAHU") {
        // L∆ØU √ù: currentReportCollectAndSubmit n√™n throw Error(message) c√≥ k√®m status/text n·∫øu fail
        await window.currentReportCollectAndSubmit(date);
      } else if (type === "maintenanceReport") {
        await submitMaintenanceReport(date);
      } else {
        console.warn(`${logPrefix} - no submit handler for type="${type}"`);
        alert("Ch∆∞a g·∫Øn submit cho lo·∫°i b√°o c√°o n√†y.");
        return;
      }

      console.info(`${logPrefix} - success in ${Date.now() - startedAt}ms`);

      document.getElementById("update-report").style.display = "none";
      document.getElementById("exit").style.display = "none";
      document.getElementById("edit-report").style.display = "inline-flex";
      document.getElementById("add-task-btn").style.display = "none";
      document.getElementById("switch-btn").style.marginLeft = "900px";

      // üëâ T·∫Øt edit mode cho b·∫£ng b·∫£o d∆∞·ª°ng (g·ª° c·ªôt Thao t√°c)
      if (type === "maintenanceReport")
        window.__setMaintenanceEditMode?.(false);

      // Reload l·∫°i ƒë√∫ng ng√†y ƒëang ch·ªçn (s·∫Ω hi·ªÉn th·ªã d·ªØ li·ªáu v·ª´a upsert)
      const changeEvent = new Event("change");
      dateInput.dispatchEvent(changeEvent);
    } catch (e) {
      // ==== LOG CHI TI·∫æT L·ªñI T·∫†I ƒê√ÇY ====
      console.error(`${logPrefix} - failed in ${Date.now() - startedAt}ms`);
      console.error(`${logPrefix} - message:`, e?.message ?? e);
      if (e?.stack) console.error(`${logPrefix} - stack:`, e.stack);

      // N·∫øu currentReportCollectAndSubmit n√©m l·ªói d·∫°ng {status, statusText, body}
      if (e?.status || e?.statusText || e?.body) {
        console.error(`${logPrefix} - status:`, e.status, e.statusText);
        console.error(`${logPrefix} - body:`, e.body);
      }

      // In th√™m c√°c bi·∫øn ng·ªØ c·∫£nh ƒë·ªÉ d·ªÖ d√≤
      console.debug(`${logPrefix} - context`, { type, date });

      alert(`C√≥ l·ªói khi l∆∞u: ${e?.message || "Vui l√≤ng th·ª≠ l·∫°i."}`);
    } finally {
      updateBtn.disabled = false;
      updateBtn.textContent = "C·∫≠p nh·∫≠t";
      console.info(`${logPrefix} - end`);
    }
  });

  exitBtn.addEventListener("click", async () => {
    document.getElementById("update-report").style.display = "none";
    document.getElementById("exit").style.display = "none";
    document.getElementById("edit-report").style.display = "inline-flex";
    document.getElementById("add-task-btn").style.display = "none";
    document.getElementById("switch-btn").style.marginLeft = "900px";

    if (select.value === "maintenanceReport")
      window.__setMaintenanceEditMode?.(false);

    await renderSelectedReport();
  });

  // G·ªçi m·∫∑c ƒë·ªãnh khi load trang
  renderSelectedReport();
}
