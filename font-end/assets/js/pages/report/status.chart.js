// report/status.chart.js
// Y√™u c·∫ßu: loadChartLibs() ƒë√£ n·∫°p Chart.js + chartjs-plugin-datalabels (t·ª´ report/chart.js)
import { loadChartLibs, fmt } from "./chart.js";

const API_BASE = "http://10.100.201.25:4000/api/records";

let _pie = null; // gi·ªØ instance hi·ªán t·∫°i
let _pieCanvasRef = null; // tham chi·∫øu canvas ƒëang d√πng (ƒë·ªÉ so s√°nh khi nav)

export function renderStatusDonutRow() {
  return `
    <section class="card p-4" id="status-pie-section" style="margin-top:10px">
      <h3 class="text-lg font-bold" style="text-align:center;color:var(--fg)">
        Tr·∫°ng th√°i k·∫ø ho·∫°ch (th√°ng ƒëang ch·ªçn)
      </h3>

      <div style="display:flex;gap:12px;align-items:stretch;margin-top:8px">
        <!-- Tr√°i: t√≥m t·∫Øt -->
        <div style="flex:0 0 42%;
                    background: rgba(59,130,246,.08);
                    border: 1px solid rgba(255,255,255,.08);
                    border-radius:12px;
                    padding:12px;">
          <div style="margin:4px 0;color:var(--fg)">
            <b>T·ªïng s·ªë k·∫ø ho·∫°ch:</b>
            <span id="spTotal" style="font-weight:700;">-</span>
          </div>
          <div style="margin:6px 0;color:var(--fg)">
            <b>ƒê√∫ng h·∫°n:</b>
            <span id="spOnTime"
                  style="display:inline-block;background:#e7f8ee;color:#058f3e;
                         padding:2px 8px;border-radius:999px;font-weight:700;">-</span>
          </div>
          <div style="margin:6px 0;color:var(--fg)">
            <b>Tr·ªÖ h·∫πn:</b>
            <span id="spLate"
                  style="display:inline-block;background:#ffe6e3;color:#c92408;
                         padding:2px 8px;border-radius:999px;font-weight:700;">-</span>
          </div>
          <div style="margin:6px 0;color:var(--fg)">
            <b>Ch∆∞a th·ª±c hi·ªán:</b>
            <span id="spTodo"
                  style="display:inline-block;background:#e5e7eb;color:#111827;
                         padding:2px 8px;border-radius:999px;font-weight:700;">-</span>
          </div>
        </div>

        <!-- Ph·∫£i: PIE -->
        <div style="flex:1;min-width:280px;">
          <div style="height:260px;position:relative">
            <canvas id="spPie" style="width:100% !important; height:100% !important; display:block"></canvas>
          </div>
        </div>
      </div>
    </section>
  `;
}

/* ---------------- helpers ---------------- */

// ƒê·ª£i ph·∫ßn t·ª≠ xu·∫•t hi·ªán trong DOM (h·ªØu √≠ch khi SPA render async)
async function waitForElement(sel, tries = 40, interval = 50) {
  for (let i = 0; i < tries; i++) {
    const el = document.querySelector(sel);
    if (el) return el;
    await new Promise((r) => setTimeout(r, interval));
  }
  return null;
}

function dayStart(d) {
  const x = new Date(d);
  x.setHours(0, 0, 0, 0);
  return x;
}

// L·∫•y YYYY-MM t·ª´ 2 select #mt-year, #mt-month (n·∫øu thi·∫øu th√¨ fallback th√°ng hi·ªán t·∫°i)
function getSelectedMonthKey() {
  const yEl = document.getElementById("mt-year");
  const mEl = document.getElementById("mt-month");
  const now = new Date();
  const year = (yEl?.value && Number(yEl.value)) || now.getUTCFullYear();
  const month = (mEl?.value && Number(mEl.value)) || now.getUTCMonth() + 1;
  return `${year}-${String(month).padStart(2, "0")}`;
}

async function fetchRecordsByMonth(monthKey) {
  const url = `${API_BASE}?month=${encodeURIComponent(monthKey)}`;
  const res = await fetch(url, { headers: { Accept: "application/json" } });
  if (!res.ok) {
    const text = await res.text().catch(() => "");
    throw new Error(
      `GET ${url} -> ${res.status} ${res.statusText} :: ${text.slice(0, 150)}`
    );
  }
  return res.json();
}

// Ph√¢n lo·∫°i:
// - ƒê√∫ng h·∫°n: c√≥ actualDate v√† actualDate ‚â§ plannedDate
// - Tr·ªÖ h·∫πn: (c√≥ actualDate v√† actualDate > plannedDate) ho·∫∑c (kh√¥ng c√≥ actualDate v√† plannedDate < h√¥m nay)
// - Ch∆∞a th·ª±c hi·ªán: kh√¥ng c√≥ actualDate v√† plannedDate ‚â• h√¥m nay
function summarize(rows) {
  const today = dayStart(new Date());
  let onTime = 0,
    late = 0,
    todo = 0;

  for (const r of rows || []) {
    const pd = r?.plannedDate ? dayStart(new Date(r.plannedDate)) : null;
    const ad = r?.actualDate ? dayStart(new Date(r.actualDate)) : null;

    if (ad) {
      if (pd && ad.getTime() <= pd.getTime()) onTime++;
      else late++;
    } else {
      if (pd && pd.getTime() < today.getTime()) late++;
      else todo++;
    }
  }

  const total = onTime + late + todo;
  return { onTime, late, todo, total };
}

function renderSummary({ total, onTime, late, todo }) {
  const set = (id, v) => {
    const el = document.getElementById(id);
    if (el) el.textContent = fmt(v);
  };
  set("spTotal", total);
  set("spOnTime", onTime);
  set("spLate", late);
  set("spTodo", todo);
}

function buildOrUpdatePie({ onTime, late, todo }) {
  const canvas = document.getElementById("spPie");
  if (!canvas) return;

  // üîß Quan tr·ªçng: n·∫øu canvas m·ªõi kh√°c canvas c≈© ‚Üí destroy chart c≈©
  if (_pie && _pieCanvasRef && _pieCanvasRef !== canvas) {
    try {
      _pie.destroy();
    } catch {}
    _pie = null;
  }
  _pieCanvasRef = canvas;

  const ctx = canvas.getContext("2d");
  if (!ctx) return;

  const labels = ["ƒê√∫ng h·∫°n", "Tr·ªÖ h·∫πn", "Ch∆∞a th·ª±c hi·ªán"];
  const data = [onTime, late, todo];
  const colors = ["#2bbb6f", "#e3522e", "#94a3b8"]; // xanh / ƒë·ªè / x√°m

  const datalabelsAsValue = {
    formatter: (v) => (Number(v) > 0 ? fmt(v) : ""),
    color: "black",
    borderRadius: 4,
    padding: 4,
    font: { weight: "600", size: 11 },
    anchor: "center",
    align: "center",
    clamp: true,
  };

  const cfg = {
    type: "pie",
    data: {
      labels,
      datasets: [{ data, backgroundColor: colors, borderColor: "transparent" }],
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: "bottom",
          labels: {
            usePointStyle: true,
            boxWidth: 8,
            boxHeight: 8,
            font: { size: 12 },
          },
        },
        tooltip: { callbacks: { label: (c) => ` ${c.label}: ${fmt(c.raw)}` } },
        datalabels: datalabelsAsValue,
      },
    },
  };

  if (_pie) {
    _pie.data.labels = labels;
    _pie.data.datasets[0].data = data;
    _pie.update();
  } else {
    _pie = new window.Chart(ctx, cfg);
  }
}

/* ---------------- init ---------------- */

export async function initStatusDonutRow() {
  await loadChartLibs();

  // ƒê·ª£i ch·∫Øc ch·∫Øn c·∫£ canvas & 2 select c√≥ trong DOM tr∆∞·ªõc khi render
  await waitForElement("#spPie");
  await waitForElement("#mt-month");
  await waitForElement("#mt-year");

  const monthSelect = document.getElementById("mt-month");
  const yearSelect = document.getElementById("mt-year");

  // H√†m refresh d√πng l·∫°i khi ƒë·ªïi th√°ng/nƒÉm HO·∫∂C khi quay l·∫°i trang
  const refresh = async () => {
    const monthKey = getSelectedMonthKey();
    try {
      const rows = await fetchRecordsByMonth(monthKey);
      const s = summarize(rows);
      renderSummary(s);
      buildOrUpdatePie(s);
    } catch (e) {
      console.error(e);
      const s = { onTime: 0, late: 0, todo: 0, total: 0 };
      renderSummary(s);
      buildOrUpdatePie(s);
    }
  };

  // L·∫ßn ƒë·∫ßu
  await refresh();

  // L·∫Øng nghe thay ƒë·ªïi (m·ªói l·∫ßn mount trang s·∫Ω l·∫Øng nghe tr√™n DOM m·ªõi)
  monthSelect?.addEventListener("change", refresh, { passive: true });
  yearSelect?.addEventListener("change", refresh, { passive: true });

  // üîß Ph√≤ng tr∆∞·ªùng h·ª£p SPA render thay n·ªôi dung section sau init:
  // m·ªói l·∫ßn quay l·∫°i route, n·∫øu canvas m·ªõi mount, destroy chart c≈© v√† render l·∫°i
  const mo = new MutationObserver(async () => {
    const canvas = document.getElementById("spPie");
    if (canvas && _pieCanvasRef !== canvas) {
      if (_pie) {
        try {
          _pie.destroy();
        } catch {}
        _pie = null;
      }
      _pieCanvasRef = null;
      await refresh();
    }
  });
  mo.observe(document.getElementById("status-pie-section") || document.body, {
    childList: true,
    subtree: true,
  });
}
