// ui.js
// ======================================================================
//  TABLE OF CONTENTS / M·ª§C L·ª§C (KH√îNG ƒê·ªîI LOGIC)
//  [HEADER]   : renderHeader()
//  [GLOBAL-SEARCH] : S·ª± ki·ªán thanh t√¨m ki·∫øm to√†n c·ª•c (delegation)
//  [THEME]    : Toggle Light/Dark + kh√¥i ph·ª•c theme
//  [SIDEBAR]  : renderSidebar() + toggleSidebar() + kh√¥i ph·ª•c tr·∫°ng th√°i
//  [WEATHER]  : Weather chip (Open-Meteo) + cache + geolocation
//  [PROFILE]  : Popup h·ªì s∆° ng∆∞·ªùi d√πng + logout
//  [CHAT]     : Chat popup (open/close/send) + delegation
// ======================================================================

// ======================================================================
// [HEADER]  ‚Äî Header + Topbar (KH√îNG S·ª¨A LOGIC/DOM/ID/CLASS/API)
// ----------------------------------------------------------------------
// - Xu·∫•t ra: renderHeader()
// - Ch·ª©a n√∫t toggleSidebar(), icon theme, global search input (#topbar-search)
// - V·ªã tr√≠ weather chip: #weather-chip
// ======================================================================
export function renderHeader() {
  const user = JSON.parse(
    localStorage.getItem("user_info") ||
      sessionStorage.getItem("user_info") ||
      "null"
  );

  return `
  <header class="topbar2">
    <div class="left">
      <button class="iconbtn" title="Menu" onclick="window.toggleSidebar()">
        <span class="i-burger"></span>
      </button>
      <div class="branddot">
        <img src="assets/pictures/icon_company.png" alt="avatar">
      </div>

      <div class="divider-vert"></div>

      <!----- Global Search bar ------>
      <div class="searchbar2">
        <span class="i-search"></span>
        <input type="search" id="topbar-search" placeholder="Search" />
      </div>
    </div>

    <div class="right">
      <div id="weather-chip" class="weather-chip" title="Loading weather forecast....">Loading...</div>
      <button id="chat-btn" class="iconbtn" title="Messages"><span class="i-chat"></span></button>
      <button class="iconbtn" title="Dark/Light Mode" onclick="window.toggleTheme()">
        <span id="theme-icon" class="i-sun"></span>
      </button>
      <button class="iconbtn" title="Language"><span class="i-flag"></span></button>
      <div class="avatar user-menu">
        <img src="assets/pictures/user.png" alt="avatar">
      </div>
    </div>
  </header>`;
}

// ======================================================================
// [GLOBAL-SEARCH] ‚Äî Global Search Bar Events (delegation)
// ----------------------------------------------------------------------
// - Kh·ªüi t·∫°o 1 l·∫ßn, l·∫Øng nghe IME, input, paste, keyup, Enter/Escape
// - Ph√°t CustomEvent "search-query-changed" v·ªõi payload { query }
// - ƒêi·ªÉm d√≤ l·ªói nhanh: lastSent, composing, emit(), dispatch()
// ======================================================================
/*-------- Global Search Bar Events (delegated) ---------*/
// ƒê·∫∑t trong ui.js (m·ªôt l·∫ßn l√† ƒë·ªß, kh√¥ng c·∫ßn g·ªçi th·ªß c√¥ng)
(() => {
  let composing = false; // IME ƒëang nh·∫≠p?
  let lastSent = null; // Tr√°nh ph√°t tr√πng
  let raf = 0;

  const getInput = () => document.getElementById("topbar-search");
  const read = () => getInput()?.value ?? "";

  const dispatch = (q) => {
    if (q === lastSent) return;
    lastSent = q;
    window.dispatchEvent(
      new CustomEvent("search-query-changed", { detail: { query: q } })
    );
  };

  const emit = () => {
    cancelAnimationFrame(raf);
    raf = requestAnimationFrame(() => dispatch(read()));
  };

  // --- Delegation: l·∫Øng nghe tr√™n document ---
  document.addEventListener("compositionstart", (e) => {
    if (e.target?.id === "topbar-search") composing = true;
  });

  document.addEventListener("compositionend", (e) => {
    if (e.target?.id === "topbar-search") {
      composing = false;
      emit();
    }
  });

  // G√µ t·ªõi ƒë√¢u l·ªçc t·ªõi ƒë√≥ (k·ªÉ c·∫£ paste/cut/drop)
  const liveEvents = ["input", "search", "paste", "cut", "drop", "keyup"];
  liveEvents.forEach((type) => {
    document.addEventListener(type, (e) => {
      if (e.target?.id !== "topbar-search") return;
      if (!composing) emit();
    });
  });

  // ƒê·∫£m b·∫£o nh·∫•n 1 ph√≠m c≈©ng l·ªçc t·ª©c th√¨, v√† ch·∫∑n Enter g√¢y ƒëi·ªÅu h∆∞·ªõng
  document.addEventListener("keydown", (e) => {
    if (e.target?.id !== "topbar-search") return;
    if (e.key === "Enter") {
      e.preventDefault(); // tr√°nh submit / ƒëi·ªÅu h∆∞·ªõng
      e.stopPropagation();
    }
    if (e.key === "Escape") {
      const el = getInput();
      if (el) el.value = "";
      lastSent = null;
      composing = false;
      emit();
      return;
    }
    if (!composing) emit();
  });

  // Khi √¥ search ƒë∆∞·ª£c focus l·∫°i, ph√°t l·∫°i ƒë·ªÉ ƒë·ªìng b·ªô trang m·ªõi bind listener
  document.addEventListener("focusin", (e) => {
    if (e.target?.id === "topbar-search") {
      lastSent = null;
      emit();
    }
  });

  // ƒê·ªìng b·ªô khi chuy·ªÉn route SPA / tab tr·ªü l·∫°i / DOM s·∫µn s√†ng
  window.addEventListener("hashchange", () => {
    lastSent = null;
    emit();
  });
  document.addEventListener("visibilitychange", () => {
    if (!document.hidden) {
      lastSent = null;
      emit();
    }
  });
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      lastSent = null;
      emit();
    });
  } else {
    lastSent = null;
    emit();
  }
})();

// ======================================================================
// [THEME] ‚Äî Toggle Light/Dark Theme + Kh√¥i ph·ª•c theme
// ----------------------------------------------------------------------
// - API: window.toggleTheme()
// - L∆∞u: localStorage.theme = 'dark' | 'light'
// - ƒêi·ªÉm d√≤ l·ªói: class "dark-theme" tr√™n <body>, #theme-icon
// ======================================================================
/*----------- Toggle light/dark theme ------------*/
window.toggleTheme = () => {
  const body = document.body;
  const icon = document.getElementById("theme-icon");
  const dark = body.classList.toggle("dark-theme");

  if (icon) {
    icon.className = dark ? "i-moon" : "i-sun";
  }

  localStorage.setItem("theme", dark ? "dark" : "light");
};

// Kh√¥i ph·ª•c theme khi load
(() => {
  const theme = localStorage.getItem("theme");
  if (theme === "dark") {
    document.body.classList.add("dark-theme");
    const icon = document.getElementById("theme-icon");
    if (icon) icon.className = "i-moon";
  }
})();

// ======================================================================
// [SIDEBAR] ‚Äî Sidebar UI + tr·∫°ng th√°i thu g·ªçn/m·ªü r·ªông
// ----------------------------------------------------------------------
// - Xu·∫•t ra: renderSidebar()
// - API: window.toggleSidebar()
// - L∆∞u tr·∫°ng th√°i v√†o localStorage.sidebar-collapsed
// ======================================================================
export function renderSidebar() {
  const item = (href, icon, text) => `
    <a class="side-item side-link" href="${href}">
      <span class="${icon}"></span>
      <span class="label">${text}</span>
    </a>`;

  return `
  <aside class="sidebar2" id="app-sidebar">
    ${item("#/info/air", "i-home", "Th√¥ng tin")}
    ${item("#/plan/electric", "i-system", "K·∫ø ho·∫°ch b·∫£o d∆∞·ª°ng")}

    <!-- C√†i ƒë·∫∑t c√≥ submenu -->
    <div class="side-group">
      <div class="side-item" onclick="window.toggleSubmenu(this)">
        <span class="i-report"></span>
        <span class="label">C√†i ƒë·∫∑t</span>
      </div>
      <div class="submenu hidden">
        <a class="side-item side-sublink" href="#/crud/info">
          <span class="label">Th√¥ng tin thi·∫øt b·ªã</span>
        </a>
        <a class="side-item side-sublink" href="#/crud/plan">
          <span class="label">K·∫ø ho·∫°ch b·∫£o d∆∞·ª°ng nƒÉm</span>
        </a>
      </div>
    </div>

    ${item("#/report", "i-alert", "B√°o c√°o")}
    ${item("#/todo", "i-toDo", "To-Do List")}
  </aside>`;
}

// ======================================================================
// [WEATHER] ‚Äî Weather Chip (Open-Meteo) + cache + geolocation
// ----------------------------------------------------------------------
// - Entry: IIFE mountWeatherChip() t·ª± kh·ªüi ch·∫°y, v√† expose window.refreshWeatherChip()
// - Cache key: "weather_cache_v1", TTL: 10 ph√∫t
// - Fallback v·ªã tr√≠: B·∫Øc Ninh
// - ƒêi·ªÉm d√≤ l·ªói: getCoords(), reverseName(), fetchWeather(), render()
// ======================================================================
/* ===================== WEATHER CHIP (Open-Meteo) ==================== */

/* ===================== WEATHER CHIP (Open-Meteo) ‚Äî FIXED LOCATION ==================== */
/* ===================== WEATHER CHIP (Fixed B·∫Øc Ninh + Persistent Observer) ==================== */
const WEATHER_FIXED_LOCATION = {
  lat: 21.185,
  lon: 106.074,
  name: "B·∫Øc Ninh",
  country: "VN",
};

(function mountWeatherChipFixed() {
  const ID = "weather-chip";
  const el = () => document.getElementById(ID);

  const CACHE_KEY = "weather_cache_v1";
  const CACHE_MS = 10 * 60 * 1000; // 10 ph√∫t
  let inFlight = false;

  const WMAP = {
    0: { t: "Tr·ªùi quang", i: "‚òÄÔ∏è" },
    1: { t: "√çt m√¢y", i: "üå§Ô∏è" },
    2: { t: "C√≥ m√¢y", i: "‚õÖ" },
    3: { t: "Nhi·ªÅu m√¢y", i: "‚òÅÔ∏è" },
    45: { t: "S∆∞∆°ng m√π", i: "üå´Ô∏è" },
    48: { t: "S∆∞∆°ng m√π bƒÉng", i: "üå´Ô∏è" },
    51: { t: "M∆∞a ph√πn nh·∫π", i: "üå¶Ô∏è" },
    53: { t: "M∆∞a ph√πn", i: "üå¶Ô∏è" },
    55: { t: "M∆∞a ph√πn d√†y", i: "üåßÔ∏è" },
    61: { t: "M∆∞a nh·∫π", i: "üåßÔ∏è" },
    63: { t: "M∆∞a v·ª´a", i: "üåßÔ∏è" },
    65: { t: "M∆∞a to", i: "üåßÔ∏è" },
    71: { t: "Tuy·∫øt r∆°i", i: "‚ùÑÔ∏è" },
    80: { t: "M∆∞a r√†o", i: "üå¶Ô∏è" },
    95: { t: "D√¥ng", i: "‚õàÔ∏è" },
  };

  async function fetchWithTimeout(url, ms = 8000) {
    const ctrl = new AbortController();
    const t = setTimeout(() => ctrl.abort(), ms);
    try {
      return await fetch(url, { signal: ctrl.signal });
    } finally {
      clearTimeout(t);
    }
  }

  async function fetchWeather(lat, lon) {
    const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true&timezone=auto`;
    const r = await fetchWithTimeout(url);
    if (!r.ok) throw new Error("weather HTTP " + r.status);
    return r.json();
  }

  function render(d) {
    const node = el();
    if (!node) return;
    const map = WMAP[d.code] || { t: "Th·ªùi ti·∫øt", i: "üå§Ô∏è" };
    node.innerHTML = `
      <span class="w-emoji">${map.i}</span>
      <span class="w-place">${d.place}</span>
      <span class="w-temp">${d.temp}¬∞C</span>
      <span class="w-desc">${map.t}</span>
      <span class="w-dot">‚Ä¢</span>
      <span class="w-wind">Gi√≥ ${d.wind} km/h</span>
    `;
    node.title = `${map.t} ‚Ä¢ ${d.temp}¬∞C ‚Ä¢ Gi√≥ ${d.wind} km/h`;
  }

  async function doWork() {
    if (inFlight) return;
    if (!el()) return;
    inFlight = true;
    try {
      const now = Date.now();
      const cache = JSON.parse(localStorage.getItem(CACHE_KEY) || "null");
      if (cache && now - cache.ts < CACHE_MS) {
        render(cache.data);
        return;
      }

      const pos = WEATHER_FIXED_LOCATION;
      const place = `${pos.name}${pos.country ? ", " + pos.country : ""}`;

      const w = await fetchWeather(pos.lat, pos.lon);
      const cur = w.current_weather || {};
      const data = {
        place,
        temp: Math.round(cur.temperature ?? 0),
        wind: Math.round(cur.windspeed ?? 0),
        code: cur.weathercode ?? 2,
      };

      localStorage.setItem(CACHE_KEY, JSON.stringify({ ts: now, data }));
      render(data);
    } catch (e) {
      const node = el();
      if (node) {
        node.textContent = "Kh√¥ng l·∫•y ƒë∆∞·ª£c th·ªùi ti·∫øt";
        node.title = e?.message || "L·ªói th·ªùi ti·∫øt";
      }
    } finally {
      inFlight = false;
    }
  }

  // Public API ƒë·ªÉ trang kh√°c g·ªçi th·ªß c√¥ng sau khi render header
  window.refreshWeatherChip = () => doWork();

  // G·ªçi ngay n·∫øu ƒë√£ c√≥ ph·∫ßn t·ª≠, ho·∫∑c khi DOM xong
  function boot() {
    el() ? doWork() : null;
  }
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", boot, { once: true });
  } else {
    boot();
  }

  // Observer b·ªÅn b·ªâ: m·ªói khi #weather-chip ƒë∆∞·ª£c th√™m l·∫°i sau khi chuy·ªÉn trang, g·ªçi doWork()
  let raf = 0;
  const mo = new MutationObserver(() => {
    if (!el()) return;
    cancelAnimationFrame(raf);
    raf = requestAnimationFrame(() => doWork());
  });
  mo.observe(document.documentElement, { childList: true, subtree: true });

  // Th√™m hook route SPA (ph√≤ng tr∆∞·ªùng h·ª£p header render xong tr∆∞·ªõc observer tick)
  window.addEventListener("hashchange", () => {
    setTimeout(() => window.refreshWeatherChip?.(), 0);
  });
})();

// ======================================================================
// [SIDEBAR] ‚Äî Toggle & Restore state
// ----------------------------------------------------------------------
// - API: window.toggleSidebar()
// - L∆∞u tr·∫°ng th√°i thu g·ªçn v√†o localStorage.sidebar-collapsed ("1"/"0")
// ======================================================================
// Thu g·ªçn / m·ªü r·ªông sidebar v√† l∆∞u tr·∫°ng th√°i
window.toggleSidebar = () => {
  document.body.classList.toggle("is-collapsed");
  localStorage.setItem(
    "sidebar-collapsed",
    document.body.classList.contains("is-collapsed") ? "1" : "0"
  );
};

// Kh√¥i ph·ª•c tr·∫°ng th√°i khi load
(() => {
  if (localStorage.getItem("sidebar-collapsed") === "1") {
    document.body.classList.add("is-collapsed");
  }
})();

// ======================================================================
// [PROFILE] ‚Äî User Profile Popup (avatar click) + Logout
// ----------------------------------------------------------------------
// - Entry: delegation click v√†o .avatar.user-menu -> renderUserProfilePopup()
// - Close: #close-profile-popup, #profile-popup-overlay
// - Logout: x√≥a c√°c token + chuy·ªÉn #/login + reload()
// - Xu·∫•t ra: renderUserProfilePopup() (KH√îNG ƒë·ªïi c√∫ ph√°p/HTML)
// ======================================================================
// X·ª≠ l√Ω popup user khi click avatar
document.addEventListener("click", function (e) {
  if (e.target.closest && e.target.closest(".avatar.user-menu")) {
    if (document.getElementById("user-profile-popup")) return;
    const popupHtml = renderUserProfilePopup();
    document.body.insertAdjacentHTML("beforeend", popupHtml);

    document.getElementById("close-profile-popup").onclick = closeProfilePopup;
    document.getElementById("profile-popup-overlay").onclick =
      closeProfilePopup;

    document.getElementById("btn-logout-popup").onclick = function () {
      localStorage.removeItem("auth_token");
      localStorage.removeItem("refresh_token");
      localStorage.removeItem("user_info");
      sessionStorage.removeItem("auth_token");
      sessionStorage.removeItem("refresh_token");
      sessionStorage.removeItem("user_info");
      location.href = "#/login";
      location.reload();
    };
  }
});

function closeProfilePopup() {
  document.getElementById("user-profile-popup")?.remove();
  document.getElementById("profile-popup-overlay")?.remove();
}

export function renderUserProfilePopup() {
  const user =
    JSON.parse(
      localStorage.getItem("user_info") ||
        sessionStorage.getItem("user_info") ||
        "null"
    ) || {};

  const fullName = `${(user.firstName || "").trim()} ${(
    user.lastName || ""
  ).trim()}`;
  const empCode = user.code || "";

  return `
    <div class="profile-card" id="user-profile-popup" style="position:fixed; top:56px; right:16px; z-index:1000;">
      <div class="pc-header">
        <button class="pc-close" id="close-profile-popup" aria-label="ƒê√≥ng">√ó</button>
      </div>

      <div class="pc-body">
        <div class="pc-avatar"></div>
        <div class="pc-name">
          <div class="pc-full">${fullName}</div>
          <div class="pc-handle">${empCode}</div>
        </div>
      </div>

      <div class="pc-menu">
        <button class="pc-item danger" id="btn-logout-popup">
          <span class="i-exit" style="margin-right:8px"></span>Log out
        </button>
      </div>
    </div>

    <div class="profile-popup-overlay" id="profile-popup-overlay"></div>
  `;
}

// ======================================================================
// [CHAT] ‚Äî Chat Popup (render/open/close/send) + delegation
// ----------------------------------------------------------------------
// - Entry: click #chat-btn -> openChat()
// - Close: #close-chat
// - Send: #send-btn ho·∫∑c Enter khi focus input
// - Endpoint: POST http://127.0.0.1:1080/chat { text }
// - ƒêi·ªÉm d√≤ l·ªói: fetch(), loadingMsg, data.answer
// ======================================================================
/* ====================== CHAT POPUP ====================== */
/** ================== Chat Popup (gi·ªØ l·ªãch s·ª≠ t·ªõi khi ƒë√≥ng tab) ================== */
const CHAT_STORE_KEY = "chat_popup_state_v1"; // ƒë·ªïi key n·∫øu c·∫ßn reset

/* ------- L∆∞u/ƒë·ªçc tr·∫°ng th√°i ------- */
function loadState() {
  try {
    const raw = sessionStorage.getItem(CHAT_STORE_KEY);
    return raw ? JSON.parse(raw) : { msgs: [] }; // [{ text, isUser }]
  } catch {
    return { msgs: [] };
  }
}

function saveState(state) {
  try {
    sessionStorage.setItem(CHAT_STORE_KEY, JSON.stringify(state));
  } catch {}
}

/* ------- Render markup ------- */
function renderChatPopup() {
  if (document.getElementById("chat-popup")) return;

  const html = `
  <div id="chat-popup" style="
    position: fixed; right:20px; bottom: 24px; z-index: 1000;
    width: 360px; max-height: 46vh; display: none;
    border-radius: 12px; overflow: hidden;
    box-shadow: 0 12px 30px rgba(0,0,0,.18);
    background: var(--card,#fff); color: var(--fg,#111);
    border: 1px solid var(--line,#e5e7eb);
  ">
    <div style="display: flex; align-items:center; gap:8px; padding:10px 12px; border-bottom:1px solid var(--line,#e5e7eb); background: var(--card,#fff);">
      <div style="font-weight:700;">Tr·ª£ l√Ω (Assistant)</div>
      <div style="flex:1"></div>
      <button id="close-chat" class="iconbtn" title="ƒê√≥ng" style="border:none; background: transparent; font-size:18px; cursor:pointer; line-height:1">√ó</button>
    </div>

    <div id="messages" style="
      padding: 12px; overflow:auto; max-height: 34vh;
      background: var(--card,#fff);
    "></div>

    <div style="display:flex; gap:8px; padding:10px; border-top:1px solid var(--line,#e5e7eb); background: var(--card,#fff);">
      <input id="user-input" type="text" placeholder="Nh·∫≠p c√¢u h·ªèi‚Ä¶" style="
        flex:1; border:1px solid var(--line,#e5e7eb); border-radius:8px;
        padding:10px 12px; background:var(--card,#fff); color:var(--fg,#111);
      ">
      <button id="send-btn" class="btn primary" style="white-space: nowrap;">Send</button>
    </div>
  </div>
  `;
  document.body.insertAdjacentHTML("beforeend", html);
}

/* ------- L·∫•y element ------- */
function getChatEls() {
  return {
    popup: document.getElementById("chat-popup"),
    messages: document.getElementById("messages"),
    input: document.getElementById("user-input"),
    send: document.getElementById("send-btn"),
    close: document.getElementById("close-chat"),
  };
}

/* ------- T·∫°o bubble ------- */
function renderBubble(text, isUser) {
  const msgDiv = document.createElement("div");
  msgDiv.style.marginBottom = "8px";
  msgDiv.style.maxWidth = "75%";
  msgDiv.style.padding = "8px 13px";
  msgDiv.style.borderRadius = "18px";
  msgDiv.style.clear = "both";
  msgDiv.style.wordWrap = "break-word";
  if (isUser) {
    msgDiv.style.background = "#0084ff";
    msgDiv.style.color = "#fff";
    msgDiv.style.float = "right";
    msgDiv.style.borderBottomRightRadius = "0";
  } else {
    msgDiv.style.background = "#e5e5ea";
    msgDiv.style.color = "#222";
    msgDiv.style.float = "left";
    msgDiv.style.borderBottomLeftRadius = "0";
  }
  msgDiv.textContent = text;
  return msgDiv;
}

/* ------- API m·ªü/ƒë√≥ng ------- */
function openChat() {
  renderChatPopup();
  const { popup, messages, input } = getChatEls();
  if (!popup || !messages) return;

  popup.style.display = "block";

  // KH√îNG d√πng bi·∫øn global messages; KH√îNG xo√° l·ªãch s·ª≠ khi m·ªü l·∫°i
  // L·∫ßn ƒë·∫ßu render UI -> d·ª±ng l·∫°i l·ªãch s·ª≠ t·ª´ storage
  messages.innerHTML = "";
  const state = loadState();

  if (state.msgs.length === 0) {
    addMessage(
      "üëã Ch√†o b·∫°n! Tr·ª£ l√Ω AI ƒë√¢y ‚Äî m√¨nh c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n kh√¥ng?",
      false,
      { persist: true }
    );
  } else {
    for (const m of state.msgs) {
      messages.appendChild(renderBubble(m.text, m.isUser));
    }
    messages.scrollTop = messages.scrollHeight;
  }

  setTimeout(() => input && input.focus(), 150);
}

function closeChat() {
  const { popup } = getChatEls();
  if (popup) popup.style.display = "none"; // ch·ªâ ·∫©n, kh√¥ng xo√° DOM/l·ªãch s·ª≠
}

/* ------- Th√™m message + l∆∞u ------- */
function addMessage(text, isUser, opts = { persist: true }) {
  const { messages } = getChatEls();
  if (!messages) return;

  messages.appendChild(renderBubble(text, isUser));
  messages.scrollTop = messages.scrollHeight;

  if (opts.persist) {
    const state = loadState();
    state.msgs.push({ text, isUser });
    saveState(state);
  }
}

/* ------- G·ª≠i tin nh·∫Øn ------- */
async function sendMessage() {
  const { input, send, messages } = getChatEls();
  if (!input || !send || !messages) return;

  const text = input.value.trim();
  if (!text) return;

  addMessage(text, true, { persist: true });
  input.value = "";
  input.disabled = true;
  send.disabled = true;

  // bubble loading (kh√¥ng l∆∞u)
  const loadingMsg = document.createElement("div");
  Object.assign(loadingMsg.style, {
    marginBottom: "8px",
    maxWidth: "75%",
    padding: "8px 13px",
    borderRadius: "18px",
    wordWrap: "break-word",
    clear: "both",
    background: "#e5e5ea",
    color: "#222",
    float: "left",
    borderBottomLeftRadius: "0",
  });
  loadingMsg.innerHTML = `<div class="loading-dots"><span>.</span><span>.</span><span>.</span></div>`;
  messages.appendChild(loadingMsg);
  messages.scrollTop = messages.scrollHeight;

  try {
    const res = await fetch("http://127.0.0.1:1080/chat", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ text }),
    });

    let answer = "Ch·ªãu, kh√¥ng bi·∫øt!!!!";
    if (res.ok) {
      const data = await res.json();
      answer = data.answer || answer;
    } else {
      answer = "üëã Ch√†o b·∫°n! Tr·ª£ l√Ω AI ƒë√¢y ‚Äî m√¨nh c√≥ th·ªÉ b·∫Øt ƒë·∫ßu t·ª´ ƒë√¢u?";
    }

    const ansBubble = renderBubble(answer, false);
    messages.replaceChild(ansBubble, loadingMsg);

    // L∆∞u c√¢u tr·∫£ l·ªùi th·∫≠t
    const state = loadState();
    state.msgs.push({ text: answer, isUser: false });
    saveState(state);
  } catch (error) {
    const fallback = "üëã Ch√†o b·∫°n! Tr·ª£ l√Ω AI ƒë√¢y ‚Äî m√¨nh c√≥ th·ªÉ b·∫Øt ƒë·∫ßu t·ª´ ƒë√¢u?";
    const ansBubble = renderBubble(fallback, false);
    messages.replaceChild(ansBubble, loadingMsg);

    const state = loadState();
    state.msgs.push({ text: fallback, isUser: false });
    saveState(state);
  } finally {
    input.disabled = false;
    send.disabled = false;
    input.focus();
  }
}

/* ------- Event delegation ------- */
document.addEventListener("click", (e) => {
  if (e.target.closest && e.target.closest("#chat-btn")) {
    e.preventDefault();
    openChat();
    return;
  }
  if (e.target.closest && e.target.closest("#close-chat")) {
    e.preventDefault();
    closeChat();
    return;
  }
  if (e.target.closest && e.target.closest("#send-btn")) {
    e.preventDefault();
    sendMessage();
  }
});

/* ------- G·ª≠i b·∫±ng Enter ------- */
document.addEventListener("keydown", (e) => {
  const { input } = getChatEls();
  if (!input) return;
  if (document.activeElement === input && e.key === "Enter") {
    e.preventDefault();
    sendMessage();
  }
});
/* ====================== END CHAT POPUP ====================== */

// ======================================================================
// [SIDEBAR] ‚Äî Toggle submenu helper (gi·ªØ API c≈© trong HTML onclick)
// ----------------------------------------------------------------------
// - HTML c≈© g·ªçi: onclick="window.toggleSubmenu(this)"
// - B·∫°n c√≥ th·ªÉ ƒë·∫∑t logic show/hide trong CSS/JS kh√°c n·∫øu c·∫ßn
// ======================================================================
// (KH√îNG c√≥ thay ƒë·ªïi logic ·ªü ƒë√¢y; n·∫øu c·∫ßn, th√™m helper t·∫°i file kh√°c)
